service: videos-service
frameworkVersion: '4'

plugins:
  - serverless-python-requirements

custom:
  variables: ${file(serverless.env.yml)}

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt

# Global configuration
provider:
  name: aws
  runtime: python3.10
  stage: dev
  region: eu-central-1
  memorySize: 128
  timeout: 10
  environment:
    TABLE_NAME: Videos
  apiGateway:
    restApiId: ${self:custom.variables.restApiId}
    restApiRootResourceId: ${self:custom.variables.restApiRootResourceId}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [VideosTable, Arn]
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource:
        - "arn:aws:s3:::binge-baboon-videos/*"



functions:
  createVideo:
    handler: createVideo/create_video.create
    package:
      include: 'createVideo/**'
    events:
      - http:
          path: videos
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Authorization
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.variables.authorizerId}

  getVideos:
    handler: getVideos/get_videos.get_all
    package:
      include: 'getVideos/**'
    events:
      - http:
          path: videos
          method: get
          cors:
            origins:
              - '*'
            headers:
              - Authorization
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.variables.authorizerId}

  getVideo:
    handler: getVideo/get_video.get_one
    package:
      include: 'getVideo/**'
    events:
      - http:
          path: videos/{id}
          method: get
          cors:
            origins:
              - '*'
            headers:
              - Authorization
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.variables.authorizerId}

  updateVideo:
    handler: updateVideo/update_video.update
    package:
      include: 'updateVideo/**'
    events:
      - http:
          path: videos/{id}
          method: put
          cors:
            origins:
              - '*'
            headers:
              - Authorization
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.variables.authorizerId}

  deleteVideo:
    handler: deleteVideo/delete_video.delete
    package:
      include: 'deleteVideo/**'
    events:
      - http:
          path: videos/{id}
          method: delete
          cors:
            origins:
              - '*'
            headers:
              - Authorization
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.variables.authorizerId}

  downloadVideo:
    handler: downloadVideo/download_video.download
    package:
      include: 'downloadVideo/**'
    events:
      - http:
          path: videos/download/{id}
          method: get
          cors:
            origins:
              - '*'
            headers:
              - Authorization
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.variables.authorizerId}

resources:
  Resources:
    VideosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Videos
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
