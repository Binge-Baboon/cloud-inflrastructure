service: episodes-service
frameworkVersion: '4'

plugins:
  - serverless-python-requirements

custom:
  variables: ${file(serverless.env.yml)}

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt

# Global configuration
provider:
  name: aws
  runtime: python3.10
  stage: dev
  region: eu-central-1
  memorySize: 128
  timeout: 10
  environment:
    TABLE_NAME: Episodes
  apiGateway:
    restApiId: ${self:custom.variables.restApiId}
    restApiRootResourceId: ${self:custom.variables.restApiRootResourceId}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [EpisodesTable, Arn]

# Lambda functions
functions:
  createEpisode:
    handler: createEpisode/create_episode.create
    package:
      include: 'createEpisode/**'
    events:
      - http:
          path: episodes
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Authorization
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.variables.authorizerId}

  getEpisodes:
    handler: getEpisodes/get_episodes.get_all
    package:
      include: 'getEpisodes/**'
    events:
      - http:
          path: episodes
          method: get
          cors:
            origins:
              - '*'
            headers:
              - Authorization
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.variables.authorizerId}

  getEpisode:
    handler: getEpisode/get_episode.get_one
    package:
      include: 'getEpisode/**'
    events:
      - http:
          path: episodes/{id}
          method: get
          cors:
            origins:
              - '*'
            headers:
              - Authorization
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.variables.authorizerId}

  updateEpisode:
    handler: updateEpisode/update_episode.update
    package:
      include: 'updateEpisode/**'
    events:
      - http:
          path: episodes/{id}
          method: put
          cors:
            origins:
              - '*'
            headers:
              - Authorization
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.variables.authorizerId}

  deleteEpisode:
    handler: deleteEpisode/delete_episode.delete
    package:
      include: 'deleteEpisode/**'
    events:
      - http:
          path: episodes/{id}
          method: delete
          cors:
            origins:
              - '*'
            headers:
              - Authorization
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.variables.authorizerId}

# Additional resources (S3 storage, DynamoDB tables,...)
# Written in CloudFormation template syntax
resources:
  Resources:
    EpisodesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Episodes
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: title
            AttributeType: S
          - AttributeName: description
            AttributeType: S
          - AttributeName: episode
            AttributeType: N
          - AttributeName: season
            AttributeType: N
          - AttributeName: tvshow_id
            AttributeType: N
          - AttributeName: video_id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: TVShowIndex
            KeySchema:
              - AttributeName: tvshow_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: VideosIndex
            KeySchema:
              - AttributeName: video_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: TitleIndex
            KeySchema:
              - AttributeName: title
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: DescriptionIndex
            KeySchema:
              - AttributeName: description
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: SeasonIndex
            KeySchema:
              - AttributeName: season
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: EpisodeIndex
            KeySchema:
              - AttributeName: episode
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
