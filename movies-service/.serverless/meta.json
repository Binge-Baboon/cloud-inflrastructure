{
  "C:\\Programiranje\\Projects\\BingeBaboon\\cloud-inflrastructure\\movies-service": {
    "versionSfCore": null,
    "versionFramework": "4.0.33",
    "isWithinCompose": false,
    "composeOrgName": null,
    "servicePath": "C:\\Programiranje\\Projects\\BingeBaboon\\cloud-inflrastructure\\movies-service",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "movies-service",
      "frameworkVersion": "4",
      "plugins": [
        "serverless-python-requirements"
      ],
      "custom": {
        "variables": {
          "restApiId": "jcmn0kq6wj",
          "restApiRootResourceId": "6jqaa76ay7",
          "authorizerId": "i7pzyk"
        }
      },
      "package": {
        "exclude": [
          "node_modules/**",
          ".idea/**",
          ".requirements/**",
          "env/**",
          "README.md",
          "package.json",
          "package-lock.json",
          "requirements.txt"
        ],
        "artifactsS3KeyDirname": "serverless/movies-service/dev/code-artifacts",
        "artifact": "C:\\Programiranje\\Projects\\BingeBaboon\\cloud-inflrastructure\\movies-service\\.serverless\\movies-service.zip",
        "artifactDirectoryName": "serverless/movies-service/dev/1717348179590-2024-06-02T17:09:39.590Z"
      },
      "provider": {
        "name": "aws",
        "runtime": "python3.10",
        "stage": "dev",
        "region": "eu-central-1",
        "memorySize": 128,
        "timeout": 10,
        "environment": {
          "TABLE_NAME": "Movies"
        },
        "apiGateway": {
          "restApiId": "jcmn0kq6wj",
          "restApiRootResourceId": "6jqaa76ay7"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:DescribeTable",
              "dynamodb:Query",
              "dynamodb:Scan",
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:UpdateItem",
              "dynamodb:DeleteItem"
            ],
            "Resource": [
              {
                "Fn::GetAtt": [
                  "MoviesTable",
                  "Arn"
                ]
              }
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": "arn:aws:s3:::binge-baboon-images/*"
          }
        ],
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "CreateMovieLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/movies-service-dev-createMovie"
              }
            },
            "GetMoviesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/movies-service-dev-getMovies"
              }
            },
            "GetMovieLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/movies-service-dev-getMovie"
              }
            },
            "UpdateMovieLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/movies-service-dev-updateMovie"
              }
            },
            "DeleteMovieLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/movies-service-dev-deleteMovie"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "movies-service",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/movies-service-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/movies-service-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:DescribeTable",
                            "dynamodb:Query",
                            "dynamodb:Scan",
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "MoviesTable",
                                "Arn"
                              ]
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:GetObject",
                            "s3:PutObject"
                          ],
                          "Resource": "arn:aws:s3:::binge-baboon-images/*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "movies-service",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "CreateMovieLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/movies-service/dev/1717348179590-2024-06-02T17:09:39.590Z/movies-service.zip"
                },
                "Handler": "createMovie/create_movie.create",
                "Runtime": "python3.10",
                "FunctionName": "movies-service-dev-createMovie",
                "MemorySize": 128,
                "Timeout": 10,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "Movies"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateMovieLogGroup"
              ]
            },
            "GetMoviesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/movies-service/dev/1717348179590-2024-06-02T17:09:39.590Z/movies-service.zip"
                },
                "Handler": "getMovies/get_movies.get_all",
                "Runtime": "python3.10",
                "FunctionName": "movies-service-dev-getMovies",
                "MemorySize": 128,
                "Timeout": 10,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "Movies"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetMoviesLogGroup"
              ]
            },
            "GetMovieLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/movies-service/dev/1717348179590-2024-06-02T17:09:39.590Z/movies-service.zip"
                },
                "Handler": "getMovie/get_movie.get_one",
                "Runtime": "python3.10",
                "FunctionName": "movies-service-dev-getMovie",
                "MemorySize": 128,
                "Timeout": 10,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "Movies"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetMovieLogGroup"
              ]
            },
            "UpdateMovieLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/movies-service/dev/1717348179590-2024-06-02T17:09:39.590Z/movies-service.zip"
                },
                "Handler": "updateMovie/update_movie.update",
                "Runtime": "python3.10",
                "FunctionName": "movies-service-dev-updateMovie",
                "MemorySize": 128,
                "Timeout": 10,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "Movies"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateMovieLogGroup"
              ]
            },
            "DeleteMovieLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/movies-service/dev/1717348179590-2024-06-02T17:09:39.590Z/movies-service.zip"
                },
                "Handler": "deleteMovie/delete_movie.delete",
                "Runtime": "python3.10",
                "FunctionName": "movies-service-dev-deleteMovie",
                "MemorySize": 128,
                "Timeout": 10,
                "Environment": {
                  "Variables": {
                    "TABLE_NAME": "Movies"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteMovieLogGroup"
              ]
            },
            "CreateMovieLambdaVersionru8VNrzQC60LFgxGbMfE9tQ8DrC91fNiD9AMc8Q4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateMovieLambdaFunction"
                },
                "CodeSha256": "UqUVTOqtcinkGvKS5kKC1Lbb07sGRNjHONG9d5cfo0w="
              }
            },
            "GetMoviesLambdaVersionSz6SUiebaUb8s32f1gZDgY2U9GAXTb9j7n5oFZuFiY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetMoviesLambdaFunction"
                },
                "CodeSha256": "UqUVTOqtcinkGvKS5kKC1Lbb07sGRNjHONG9d5cfo0w="
              }
            },
            "GetMovieLambdaVersion2VqeaUz3NTIIyERP8akeRaVWEmfU2KB00Dm7zWUSfgE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetMovieLambdaFunction"
                },
                "CodeSha256": "UqUVTOqtcinkGvKS5kKC1Lbb07sGRNjHONG9d5cfo0w="
              }
            },
            "UpdateMovieLambdaVersion5HwzfJertijpMTyZBNSeTjJaL2OaRdV6V2vQ8vNipM4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateMovieLambdaFunction"
                },
                "CodeSha256": "UqUVTOqtcinkGvKS5kKC1Lbb07sGRNjHONG9d5cfo0w="
              }
            },
            "DeleteMovieLambdaVersionFC2BDn4wsH96q3mE6lLDlzzKHUlxCgZO6wHCNiA1H4g": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteMovieLambdaFunction"
                },
                "CodeSha256": "UqUVTOqtcinkGvKS5kKC1Lbb07sGRNjHONG9d5cfo0w="
              }
            },
            "ApiGatewayResourceMovies": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": "6jqaa76ay7",
                "PathPart": "movies",
                "RestApiId": "jcmn0kq6wj"
              }
            },
            "ApiGatewayResourceMoviesIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMovies"
                },
                "PathPart": "{id}",
                "RestApiId": "jcmn0kq6wj"
              }
            },
            "ApiGatewayMethodMoviesOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMovies"
                },
                "RestApiId": "jcmn0kq6wj"
              }
            },
            "ApiGatewayMethodMoviesIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMoviesIdVar"
                },
                "RestApiId": "jcmn0kq6wj"
              }
            },
            "ApiGatewayMethodMoviesPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMovies"
                },
                "RestApiId": "jcmn0kq6wj",
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": "i7pzyk",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateMovieLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateMovieLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMoviesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMovies"
                },
                "RestApiId": "jcmn0kq6wj",
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": "i7pzyk",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetMoviesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetMoviesLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMoviesIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMoviesIdVar"
                },
                "RestApiId": "jcmn0kq6wj",
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": "i7pzyk",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetMovieLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetMovieLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMoviesIdVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMoviesIdVar"
                },
                "RestApiId": "jcmn0kq6wj",
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": "i7pzyk",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateMovieLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateMovieLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMoviesIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMoviesIdVar"
                },
                "RestApiId": "jcmn0kq6wj",
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": "i7pzyk",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteMovieLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteMovieLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1717348178616": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": "jcmn0kq6wj",
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodMoviesOptions",
                "ApiGatewayMethodMoviesIdVarOptions",
                "ApiGatewayMethodMoviesPost",
                "ApiGatewayMethodMoviesGet",
                "ApiGatewayMethodMoviesIdVarGet",
                "ApiGatewayMethodMoviesIdVarPut",
                "ApiGatewayMethodMoviesIdVarDelete"
              ]
            },
            "CreateMovieLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateMovieLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      "jcmn0kq6wj",
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetMoviesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetMoviesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      "jcmn0kq6wj",
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetMovieLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetMovieLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      "jcmn0kq6wj",
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateMovieLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateMovieLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      "jcmn0kq6wj",
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteMovieLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteMovieLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      "jcmn0kq6wj",
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "MoviesTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Movies",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "N"
                  },
                  {
                    "AttributeName": "title",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "genres",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "actors",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "directors",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "image_key",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 5
                },
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "TitleIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "title",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    },
                    "ProvisionedThroughput": {
                      "ReadCapacityUnits": 5,
                      "WriteCapacityUnits": 5
                    }
                  },
                  {
                    "IndexName": "GenresIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "genres",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    },
                    "ProvisionedThroughput": {
                      "ReadCapacityUnits": 5,
                      "WriteCapacityUnits": 5
                    }
                  },
                  {
                    "IndexName": "ActorsIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "actors",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    },
                    "ProvisionedThroughput": {
                      "ReadCapacityUnits": 5,
                      "WriteCapacityUnits": 5
                    }
                  },
                  {
                    "IndexName": "DirectorsIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "directors",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    },
                    "ProvisionedThroughput": {
                      "ReadCapacityUnits": 5,
                      "WriteCapacityUnits": 5
                    }
                  },
                  {
                    "IndexName": "ImageKeyIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "image_key",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    },
                    "ProvisionedThroughput": {
                      "ReadCapacityUnits": 5,
                      "WriteCapacityUnits": 5
                    }
                  }
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-movies-service-dev-ServerlessDeploymentBucketName"
              }
            },
            "CreateMovieLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateMovieLambdaVersionru8VNrzQC60LFgxGbMfE9tQ8DrC91fNiD9AMc8Q4"
              },
              "Export": {
                "Name": "sls-movies-service-dev-CreateMovieLambdaFunctionQualifiedArn"
              }
            },
            "GetMoviesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetMoviesLambdaVersionSz6SUiebaUb8s32f1gZDgY2U9GAXTb9j7n5oFZuFiY"
              },
              "Export": {
                "Name": "sls-movies-service-dev-GetMoviesLambdaFunctionQualifiedArn"
              }
            },
            "GetMovieLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetMovieLambdaVersion2VqeaUz3NTIIyERP8akeRaVWEmfU2KB00Dm7zWUSfgE"
              },
              "Export": {
                "Name": "sls-movies-service-dev-GetMovieLambdaFunctionQualifiedArn"
              }
            },
            "UpdateMovieLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateMovieLambdaVersion5HwzfJertijpMTyZBNSeTjJaL2OaRdV6V2vQ8vNipM4"
              },
              "Export": {
                "Name": "sls-movies-service-dev-UpdateMovieLambdaFunctionQualifiedArn"
              }
            },
            "DeleteMovieLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteMovieLambdaVersionFC2BDn4wsH96q3mE6lLDlzzKHUlxCgZO6wHCNiA1H4g"
              },
              "Export": {
                "Name": "sls-movies-service-dev-DeleteMovieLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    "jcmn0kq6wj",
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-movies-service-dev-ServiceEndpoint"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "createMovie": {
          "handler": "createMovie/create_movie.create",
          "package": {
            "include": [
              "createMovie/**"
            ]
          },
          "events": [
            {
              "http": {
                "path": "movies",
                "method": "post",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "managedExternally": false,
                  "authorizerId": "i7pzyk",
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "movies-service-dev-createMovie",
          "memory": 128,
          "timeout": 10,
          "runtime": "python3.10",
          "vpc": {},
          "versionLogicalId": "CreateMovieLambdaVersionru8VNrzQC60LFgxGbMfE9tQ8DrC91fNiD9AMc8Q4"
        },
        "getMovies": {
          "handler": "getMovies/get_movies.get_all",
          "package": {
            "include": [
              "getMovies/**"
            ]
          },
          "events": [
            {
              "http": {
                "path": "movies",
                "method": "get",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "managedExternally": false,
                  "authorizerId": "i7pzyk",
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "movies-service-dev-getMovies",
          "memory": 128,
          "timeout": 10,
          "runtime": "python3.10",
          "vpc": {},
          "versionLogicalId": "GetMoviesLambdaVersionSz6SUiebaUb8s32f1gZDgY2U9GAXTb9j7n5oFZuFiY"
        },
        "getMovie": {
          "handler": "getMovie/get_movie.get_one",
          "package": {
            "include": [
              "getMovie/**"
            ]
          },
          "events": [
            {
              "http": {
                "path": "movies/{id}",
                "method": "get",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "managedExternally": false,
                  "authorizerId": "i7pzyk",
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "movies-service-dev-getMovie",
          "memory": 128,
          "timeout": 10,
          "runtime": "python3.10",
          "vpc": {},
          "versionLogicalId": "GetMovieLambdaVersion2VqeaUz3NTIIyERP8akeRaVWEmfU2KB00Dm7zWUSfgE"
        },
        "updateMovie": {
          "handler": "updateMovie/update_movie.update",
          "package": {
            "include": [
              "updateMovie/**"
            ]
          },
          "events": [
            {
              "http": {
                "path": "movies/{id}",
                "method": "put",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "managedExternally": false,
                  "authorizerId": "i7pzyk",
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "movies-service-dev-updateMovie",
          "memory": 128,
          "timeout": 10,
          "runtime": "python3.10",
          "vpc": {},
          "versionLogicalId": "UpdateMovieLambdaVersion5HwzfJertijpMTyZBNSeTjJaL2OaRdV6V2vQ8vNipM4"
        },
        "deleteMovie": {
          "handler": "deleteMovie/delete_movie.delete",
          "package": {
            "include": [
              "deleteMovie/**"
            ]
          },
          "events": [
            {
              "http": {
                "path": "movies/{id}",
                "method": "delete",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Authorization"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "managedExternally": false,
                  "authorizerId": "i7pzyk",
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "movies-service-dev-deleteMovie",
          "memory": 128,
          "timeout": 10,
          "runtime": "python3.10",
          "vpc": {},
          "versionLogicalId": "DeleteMovieLambdaVersionFC2BDn4wsH96q3mE6lLDlzzKHUlxCgZO6wHCNiA1H4g"
        }
      },
      "resources": {
        "Resources": {
          "MoviesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Movies",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "N"
                },
                {
                  "AttributeName": "title",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "genres",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "actors",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "directors",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "image_key",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 5
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "TitleIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "title",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                },
                {
                  "IndexName": "GenresIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "genres",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                },
                {
                  "IndexName": "ActorsIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "actors",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                },
                {
                  "IndexName": "DirectorsIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "directors",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                },
                {
                  "IndexName": "ImageKeyIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "image_key",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                }
              ]
            }
          }
        },
        "Outputs": {}
      }
    },
    "serviceRawFile": "service: movies-service\r\nframeworkVersion: '4'\r\n\r\nplugins:\r\n  - serverless-python-requirements\r\n\r\ncustom:\r\n  variables: ${file(serverless.env.yml)}\r\n\r\npackage:\r\n  exclude:\r\n    - node_modules/**\r\n    - .idea/**\r\n    - .requirements/**\r\n    - env/**\r\n    - README.md\r\n    - package.json\r\n    - package-lock.json\r\n    - requirements.txt\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: python3.10\r\n  stage: dev\r\n  region: eu-central-1\r\n  memorySize: 128\r\n  timeout: 10\r\n  environment:\r\n    TABLE_NAME: Movies\r\n  apiGateway:\r\n    restApiId: ${self:custom.variables.restApiId}\r\n    restApiRootResourceId: ${self:custom.variables.restApiRootResourceId}\r\n\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:DescribeTable\r\n        - dynamodb:Query\r\n        - dynamodb:Scan\r\n        - dynamodb:GetItem\r\n        - dynamodb:PutItem\r\n        - dynamodb:UpdateItem\r\n        - dynamodb:DeleteItem\r\n      Resource:\r\n        - \"Fn::GetAtt\": [MoviesTable, Arn]\r\n    - Effect: Allow\r\n      Action:\r\n        - s3:GetObject\r\n        - s3:PutObject\r\n      Resource:\r\n        - \"arn:aws:s3:::binge-baboon-images/*\"\r\n\r\nfunctions:\r\n  createMovie:\r\n    handler: createMovie/create_movie.create\r\n    package:\r\n      include:\r\n        - createMovie/**\r\n    events:\r\n      - http:\r\n          path: movies\r\n          method: post\r\n          cors:\r\n            origins:\r\n              - '*'\r\n            headers:\r\n              - Authorization\r\n          authorizer:\r\n            type: COGNITO_USER_POOLS\r\n            authorizerId: ${self:custom.variables.authorizerId}\r\n\r\n  getMovies:\r\n    handler: getMovies/get_movies.get_all\r\n    package:\r\n      include:\r\n        - getMovies/**\r\n    events:\r\n      - http:\r\n          path: movies\r\n          method: get\r\n          cors:\r\n            origins:\r\n              - '*'\r\n            headers:\r\n              - Authorization\r\n          authorizer:\r\n            type: COGNITO_USER_POOLS\r\n            authorizerId: ${self:custom.variables.authorizerId}\r\n\r\n  getMovie:\r\n    handler: getMovie/get_movie.get_one\r\n    package:\r\n      include:\r\n        - getMovie/**\r\n    events:\r\n      - http:\r\n          path: movies/{id}\r\n          method: get\r\n          cors:\r\n            origins:\r\n              - '*'\r\n            headers:\r\n              - Authorization\r\n          authorizer:\r\n            type: COGNITO_USER_POOLS\r\n            authorizerId: ${self:custom.variables.authorizerId}\r\n\r\n  updateMovie:\r\n    handler: updateMovie/update_movie.update\r\n    package:\r\n      include:\r\n        - updateMovie/**\r\n    events:\r\n      - http:\r\n          path: movies/{id}\r\n          method: put\r\n          cors:\r\n            origins:\r\n              - '*'\r\n            headers:\r\n              - Authorization\r\n          authorizer:\r\n            type: COGNITO_USER_POOLS\r\n            authorizerId: ${self:custom.variables.authorizerId}\r\n\r\n  deleteMovie:\r\n    handler: deleteMovie/delete_movie.delete\r\n    package:\r\n      include:\r\n        - deleteMovie/**\r\n    events:\r\n      - http:\r\n          path: movies/{id}\r\n          method: delete\r\n          cors:\r\n            origins:\r\n              - '*'\r\n            headers:\r\n              - Authorization\r\n          authorizer:\r\n            type: COGNITO_USER_POOLS\r\n            authorizerId: ${self:custom.variables.authorizerId}\r\n\r\nresources:\r\n  Resources:\r\n    MoviesTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: Movies\r\n        AttributeDefinitions:\r\n          - AttributeName: id\r\n            AttributeType: N\r\n          - AttributeName: title\r\n            AttributeType: S\r\n          - AttributeName: genres\r\n            AttributeType: S\r\n          - AttributeName: actors\r\n            AttributeType: S\r\n          - AttributeName: directors\r\n            AttributeType: S\r\n          - AttributeName: image_key\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: id\r\n            KeyType: HASH\r\n        ProvisionedThroughput:\r\n          ReadCapacityUnits: 5\r\n          WriteCapacityUnits: 5\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: TitleIndex\r\n            KeySchema:\r\n              - AttributeName: title\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n            ProvisionedThroughput:\r\n              ReadCapacityUnits: 5\r\n              WriteCapacityUnits: 5\r\n          - IndexName: GenresIndex\r\n            KeySchema:\r\n              - AttributeName: genres\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n            ProvisionedThroughput:\r\n              ReadCapacityUnits: 5\r\n              WriteCapacityUnits: 5\r\n          - IndexName: ActorsIndex\r\n            KeySchema:\r\n              - AttributeName: actors\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n            ProvisionedThroughput:\r\n              ReadCapacityUnits: 5\r\n              WriteCapacityUnits: 5\r\n          - IndexName: DirectorsIndex\r\n            KeySchema:\r\n              - AttributeName: directors\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n            ProvisionedThroughput:\r\n              ReadCapacityUnits: 5\r\n              WriteCapacityUnits: 5\r\n          - IndexName: ImageKeyIndex\r\n            KeySchema:\r\n              - AttributeName: image_key\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n            ProvisionedThroughput:\r\n              ReadCapacityUnits: 5\r\n              WriteCapacityUnits: 5\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "440827b0-18c1-4116-9471-4db005601402",
    "orgName": "bingebaboon",
    "userId": "Hdp2pcdMfF3ZMF4Xc9",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "bingebaboon",
    "subscription": null,
    "userEmail": "ilija.beslin@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "905418275187",
    "versionSf": "4.0.33",
    "serviceProviderAwsCfStackName": "movies-service-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-central-1:905418275187:stack/movies-service-dev/e692b440-2102-11ef-b49a-02081700dc3f",
    "serviceProviderAwsCfStackCreated": "2024-06-02T17:09:41.460Z",
    "serviceProviderAwsCfStackUpdated": "2024-06-02T17:10:16.607Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "UpdateMovieLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:905418275187:function:movies-service-dev-updateMovie:25",
        "Description": "Current Lambda function version",
        "ExportName": "sls-movies-service-dev-UpdateMovieLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMovieLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:905418275187:function:movies-service-dev-getMovie:23",
        "Description": "Current Lambda function version",
        "ExportName": "sls-movies-service-dev-GetMovieLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMoviesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:905418275187:function:movies-service-dev-getMovies:20",
        "Description": "Current Lambda function version",
        "ExportName": "sls-movies-service-dev-GetMoviesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteMovieLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:905418275187:function:movies-service-dev-deleteMovie:23",
        "Description": "Current Lambda function version",
        "ExportName": "sls-movies-service-dev-DeleteMovieLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateMovieLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:905418275187:function:movies-service-dev-createMovie:23",
        "Description": "Current Lambda function version",
        "ExportName": "sls-movies-service-dev-CreateMovieLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://jcmn0kq6wj.execute-api.eu-central-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-movies-service-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "movies-service-dev-serverlessdeploymentbucket-amclvrz6pler",
        "ExportName": "sls-movies-service-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}