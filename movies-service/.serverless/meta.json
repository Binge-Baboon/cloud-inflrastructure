{
  "C:\\Programiranje\\Projects\\BingeBaboon\\cloud-inflrastructure\\movies-service": {
    "versionSfCore": null,
    "versionFramework": "4.0.38",
    "isWithinCompose": false,
    "composeOrgName": null,
    "servicePath": "C:\\Programiranje\\Projects\\BingeBaboon\\cloud-inflrastructure\\movies-service",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "movies-service",
      "frameworkVersion": "4",
      "plugins": [
        "serverless-python-requirements"
      ],
      "custom": {
        "variables": {
          "restApiId": "jcmn0kq6wj",
          "restApiRootResourceId": "6jqaa76ay7",
          "authorizerId": "i7pzyk"
        }
      },
      "package": {
        "exclude": [
          "node_modules/**",
          ".idea/**",
          ".requirements/**",
          "env/**",
          "README.md",
          "package.json",
          "package-lock.json",
          "requirements.txt"
        ],
        "artifactsS3KeyDirname": "serverless/movies-service/dev/code-artifacts"
      },
      "provider": {
        "name": "aws",
        "runtime": "python3.10",
        "stage": "dev",
        "region": "eu-central-1",
        "memorySize": 128,
        "timeout": 10,
        "environment": {
          "TABLE_NAME": "Movies"
        },
        "apiGateway": {
          "restApiId": "jcmn0kq6wj",
          "restApiRootResourceId": "6jqaa76ay7"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:DescribeTable",
              "dynamodb:Query",
              "dynamodb:Scan",
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:UpdateItem",
              "dynamodb:DeleteItem"
            ],
            "Resource": [
              {
                "Fn::GetAtt": [
                  "MoviesTable",
                  "Arn"
                ]
              }
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": "arn:aws:s3:::binge-baboon-images/*"
          }
        ],
        "versionFunctions": true
      },
      "functions": {
        "createMovie": {
          "handler": "createMovie/create_movie.create",
          "package": {
            "include": [
              "createMovie/**"
            ]
          },
          "events": [
            {
              "http": {
                "path": "movies",
                "method": "post",
                "cors": {
                  "origins": [
                    "*"
                  ],
                  "headers": [
                    "Authorization"
                  ]
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "authorizerId": "i7pzyk"
                }
              }
            }
          ],
          "name": "movies-service-dev-createMovie"
        },
        "getMovies": {
          "handler": "getMovies/get_movies.get_all",
          "package": {
            "include": [
              "getMovies/**"
            ]
          },
          "events": [
            {
              "http": {
                "path": "movies",
                "method": "get",
                "cors": {
                  "origins": [
                    "*"
                  ],
                  "headers": [
                    "Authorization"
                  ]
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "authorizerId": "i7pzyk"
                }
              }
            }
          ],
          "name": "movies-service-dev-getMovies"
        },
        "getMovie": {
          "handler": "getMovie/get_movie.get_one",
          "package": {
            "include": [
              "getMovie/**"
            ]
          },
          "events": [
            {
              "http": {
                "path": "movies/{id}",
                "method": "get",
                "cors": {
                  "origins": [
                    "*"
                  ],
                  "headers": [
                    "Authorization"
                  ]
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "authorizerId": "i7pzyk"
                }
              }
            }
          ],
          "name": "movies-service-dev-getMovie"
        },
        "updateMovie": {
          "handler": "updateMovie/update_movie.update",
          "package": {
            "include": [
              "updateMovie/**"
            ]
          },
          "events": [
            {
              "http": {
                "path": "movies/{id}",
                "method": "put",
                "cors": {
                  "origins": [
                    "*"
                  ],
                  "headers": [
                    "Authorization"
                  ]
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "authorizerId": "i7pzyk"
                }
              }
            }
          ],
          "name": "movies-service-dev-updateMovie"
        },
        "deleteMovie": {
          "handler": "deleteMovie/delete_movie.delete",
          "package": {
            "include": [
              "deleteMovie/**"
            ]
          },
          "events": [
            {
              "http": {
                "path": "movies/{id}",
                "method": "delete",
                "cors": {
                  "origins": [
                    "*"
                  ],
                  "headers": [
                    "Authorization"
                  ]
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "authorizerId": "i7pzyk"
                }
              }
            }
          ],
          "name": "movies-service-dev-deleteMovie"
        }
      },
      "resources": {
        "Resources": {
          "MoviesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Movies",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "N"
                },
                {
                  "AttributeName": "title",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "genres",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "actors",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "directors",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "image_key",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 5
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "TitleIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "title",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                },
                {
                  "IndexName": "GenresIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "genres",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                },
                {
                  "IndexName": "ActorsIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "actors",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                },
                {
                  "IndexName": "DirectorsIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "directors",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                },
                {
                  "IndexName": "ImageKeyIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "image_key",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                  }
                }
              ]
            }
          }
        }
      }
    },
    "serviceRawFile": "service: movies-service\r\nframeworkVersion: '4'\r\n\r\nplugins:\r\n  - serverless-python-requirements\r\n\r\ncustom:\r\n  variables: ${file(serverless.env.yml)}\r\n\r\npackage:\r\n  exclude:\r\n    - node_modules/**\r\n    - .idea/**\r\n    - .requirements/**\r\n    - env/**\r\n    - README.md\r\n    - package.json\r\n    - package-lock.json\r\n    - requirements.txt\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: python3.10\r\n  stage: dev\r\n  region: eu-central-1\r\n  memorySize: 128\r\n  timeout: 10\r\n  environment:\r\n    TABLE_NAME: Movies\r\n  apiGateway:\r\n    restApiId: ${self:custom.variables.restApiId}\r\n    restApiRootResourceId: ${self:custom.variables.restApiRootResourceId}\r\n\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:DescribeTable\r\n        - dynamodb:Query\r\n        - dynamodb:Scan\r\n        - dynamodb:GetItem\r\n        - dynamodb:PutItem\r\n        - dynamodb:UpdateItem\r\n        - dynamodb:DeleteItem\r\n      Resource:\r\n        - \"Fn::GetAtt\": [MoviesTable, Arn]\r\n    - Effect: Allow\r\n      Action:\r\n        - s3:GetObject\r\n        - s3:PutObject\r\n      Resource:\r\n        - \"arn:aws:s3:::binge-baboon-images/*\"\r\n\r\nfunctions:\r\n  createMovie:\r\n    handler: createMovie/create_movie.create\r\n    package:\r\n      include:\r\n        - createMovie/**\r\n    events:\r\n      - http:\r\n          path: movies\r\n          method: post\r\n          cors:\r\n            origins:\r\n              - '*'\r\n            headers:\r\n              - Authorization\r\n          authorizer:\r\n            type: COGNITO_USER_POOLS\r\n            authorizerId: ${self:custom.variables.authorizerId}\r\n\r\n  getMovies:\r\n    handler: getMovies/get_movies.get_all\r\n    package:\r\n      include:\r\n        - getMovies/**\r\n    events:\r\n      - http:\r\n          path: movies\r\n          method: get\r\n          cors:\r\n            origins:\r\n              - '*'\r\n            headers:\r\n              - Authorization\r\n          authorizer:\r\n            type: COGNITO_USER_POOLS\r\n            authorizerId: ${self:custom.variables.authorizerId}\r\n\r\n  getMovie:\r\n    handler: getMovie/get_movie.get_one\r\n    package:\r\n      include:\r\n        - getMovie/**\r\n    events:\r\n      - http:\r\n          path: movies/{id}\r\n          method: get\r\n          cors:\r\n            origins:\r\n              - '*'\r\n            headers:\r\n              - Authorization\r\n          authorizer:\r\n            type: COGNITO_USER_POOLS\r\n            authorizerId: ${self:custom.variables.authorizerId}\r\n\r\n  updateMovie:\r\n    handler: updateMovie/update_movie.update\r\n    package:\r\n      include:\r\n        - updateMovie/**\r\n    events:\r\n      - http:\r\n          path: movies/{id}\r\n          method: put\r\n          cors:\r\n            origins:\r\n              - '*'\r\n            headers:\r\n              - Authorization\r\n          authorizer:\r\n            type: COGNITO_USER_POOLS\r\n            authorizerId: ${self:custom.variables.authorizerId}\r\n\r\n  deleteMovie:\r\n    handler: deleteMovie/delete_movie.delete\r\n    package:\r\n      include:\r\n        - deleteMovie/**\r\n    events:\r\n      - http:\r\n          path: movies/{id}\r\n          method: delete\r\n          cors:\r\n            origins:\r\n              - '*'\r\n            headers:\r\n              - Authorization\r\n          authorizer:\r\n            type: COGNITO_USER_POOLS\r\n            authorizerId: ${self:custom.variables.authorizerId}\r\n\r\nresources:\r\n  Resources:\r\n    MoviesTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: Movies\r\n        AttributeDefinitions:\r\n          - AttributeName: id\r\n            AttributeType: N\r\n          - AttributeName: title\r\n            AttributeType: S\r\n          - AttributeName: genres\r\n            AttributeType: S\r\n          - AttributeName: actors\r\n            AttributeType: S\r\n          - AttributeName: directors\r\n            AttributeType: S\r\n          - AttributeName: image_key\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: id\r\n            KeyType: HASH\r\n        ProvisionedThroughput:\r\n          ReadCapacityUnits: 5\r\n          WriteCapacityUnits: 5\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: TitleIndex\r\n            KeySchema:\r\n              - AttributeName: title\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n            ProvisionedThroughput:\r\n              ReadCapacityUnits: 5\r\n              WriteCapacityUnits: 5\r\n          - IndexName: GenresIndex\r\n            KeySchema:\r\n              - AttributeName: genres\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n            ProvisionedThroughput:\r\n              ReadCapacityUnits: 5\r\n              WriteCapacityUnits: 5\r\n          - IndexName: ActorsIndex\r\n            KeySchema:\r\n              - AttributeName: actors\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n            ProvisionedThroughput:\r\n              ReadCapacityUnits: 5\r\n              WriteCapacityUnits: 5\r\n          - IndexName: DirectorsIndex\r\n            KeySchema:\r\n              - AttributeName: directors\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n            ProvisionedThroughput:\r\n              ReadCapacityUnits: 5\r\n              WriteCapacityUnits: 5\r\n          - IndexName: ImageKeyIndex\r\n            KeySchema:\r\n              - AttributeName: image_key\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n            ProvisionedThroughput:\r\n              ReadCapacityUnits: 5\r\n              WriteCapacityUnits: 5\r\n",
    "command": [
      "remove"
    ],
    "options": {},
    "error": null,
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "440827b0-18c1-4116-9471-4db005601402",
    "orgName": "bingebaboon",
    "userId": "Hdp2pcdMfF3ZMF4Xc9",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "bingebaboon",
    "subscription": null,
    "userEmail": "ilija.beslin@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "905418275187",
    "versionSf": "4.0.38",
    "serviceProviderAwsCfStackName": "movies-service-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-central-1:905418275187:stack/movies-service-dev/e692b440-2102-11ef-b49a-02081700dc3f",
    "serviceProviderAwsCfStackCreated": "2024-06-02T17:09:41.460Z",
    "serviceProviderAwsCfStackUpdated": "2024-06-02T17:10:16.607Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "UpdateMovieLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:905418275187:function:movies-service-dev-updateMovie:25",
        "Description": "Current Lambda function version",
        "ExportName": "sls-movies-service-dev-UpdateMovieLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMovieLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:905418275187:function:movies-service-dev-getMovie:23",
        "Description": "Current Lambda function version",
        "ExportName": "sls-movies-service-dev-GetMovieLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMoviesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:905418275187:function:movies-service-dev-getMovies:20",
        "Description": "Current Lambda function version",
        "ExportName": "sls-movies-service-dev-GetMoviesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteMovieLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:905418275187:function:movies-service-dev-deleteMovie:23",
        "Description": "Current Lambda function version",
        "ExportName": "sls-movies-service-dev-DeleteMovieLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateMovieLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:905418275187:function:movies-service-dev-createMovie:23",
        "Description": "Current Lambda function version",
        "ExportName": "sls-movies-service-dev-CreateMovieLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://jcmn0kq6wj.execute-api.eu-central-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-movies-service-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "movies-service-dev-serverlessdeploymentbucket-amclvrz6pler",
        "ExportName": "sls-movies-service-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}