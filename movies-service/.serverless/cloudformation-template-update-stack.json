{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CreateMovieLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/movies-service-dev-createMovie"
      }
    },
    "GetMoviesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/movies-service-dev-getMovies"
      }
    },
    "GetMovieLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/movies-service-dev-getMovie"
      }
    },
    "UpdateMovieLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/movies-service-dev-updateMovie"
      }
    },
    "DeleteMovieLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/movies-service-dev-deleteMovie"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "movies-service",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/movies-service-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/movies-service-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "MoviesTable",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "movies-service",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "CreateMovieLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/movies-service/dev/1717185495812-2024-05-31T19:58:15.812Z/movies-service.zip"
        },
        "Handler": "createMovie/create_movie.create",
        "Runtime": "python3.10",
        "FunctionName": "movies-service-dev-createMovie",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "Movies"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateMovieLogGroup"
      ]
    },
    "GetMoviesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/movies-service/dev/1717185495812-2024-05-31T19:58:15.812Z/movies-service.zip"
        },
        "Handler": "getMovies/get_movies.get_all",
        "Runtime": "python3.10",
        "FunctionName": "movies-service-dev-getMovies",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "Movies"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetMoviesLogGroup"
      ]
    },
    "GetMovieLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/movies-service/dev/1717185495812-2024-05-31T19:58:15.812Z/movies-service.zip"
        },
        "Handler": "getMovie/get_movie.get_one",
        "Runtime": "python3.10",
        "FunctionName": "movies-service-dev-getMovie",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "Movies"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetMovieLogGroup"
      ]
    },
    "UpdateMovieLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/movies-service/dev/1717185495812-2024-05-31T19:58:15.812Z/movies-service.zip"
        },
        "Handler": "updateMovie/update_movie.update",
        "Runtime": "python3.10",
        "FunctionName": "movies-service-dev-updateMovie",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "Movies"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateMovieLogGroup"
      ]
    },
    "DeleteMovieLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/movies-service/dev/1717185495812-2024-05-31T19:58:15.812Z/movies-service.zip"
        },
        "Handler": "deleteMovie/delete_movie.delete",
        "Runtime": "python3.10",
        "FunctionName": "movies-service-dev-deleteMovie",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "Movies"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteMovieLogGroup"
      ]
    },
    "CreateMovieLambdaVersionRj8AGJVarjZpFMQqKHNhR3hQInW4QcKD2DjJUI4mRc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateMovieLambdaFunction"
        },
        "CodeSha256": "6fkYQ9g8vCxTXAxih+0HiajBFUOHX04T1MqXgS0Gqqc="
      }
    },
    "GetMoviesLambdaVersionnAORVOnzOSH3ifBlA29OmDItfxRR7cwmyWO90gUA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMoviesLambdaFunction"
        },
        "CodeSha256": "6fkYQ9g8vCxTXAxih+0HiajBFUOHX04T1MqXgS0Gqqc="
      }
    },
    "GetMovieLambdaVersionWUNJSJmsNpBZvrxagEKIdlyUm20C3StUMAjnKUswzM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMovieLambdaFunction"
        },
        "CodeSha256": "6fkYQ9g8vCxTXAxih+0HiajBFUOHX04T1MqXgS0Gqqc="
      }
    },
    "UpdateMovieLambdaVersionNXK0mrlqHRbRSJddg8FQodl4kG2RutzuiqxgEFmE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateMovieLambdaFunction"
        },
        "CodeSha256": "6fkYQ9g8vCxTXAxih+0HiajBFUOHX04T1MqXgS0Gqqc="
      }
    },
    "DeleteMovieLambdaVersion9meIbPxFbbkB2k7P4H5yZK1qmeTfQkVrTFJoOUQ9g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteMovieLambdaFunction"
        },
        "CodeSha256": "6fkYQ9g8vCxTXAxih+0HiajBFUOHX04T1MqXgS0Gqqc="
      }
    },
    "ApiGatewayResourceMovies": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": "6jqaa76ay7",
        "PathPart": "movies",
        "RestApiId": "jcmn0kq6wj"
      }
    },
    "ApiGatewayResourceMoviesIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceMovies"
        },
        "PathPart": "{id}",
        "RestApiId": "jcmn0kq6wj"
      }
    },
    "ApiGatewayMethodMoviesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Authorization'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMovies"
        },
        "RestApiId": "jcmn0kq6wj"
      }
    },
    "ApiGatewayMethodMoviesIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Authorization'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMoviesIdVar"
        },
        "RestApiId": "jcmn0kq6wj"
      }
    },
    "ApiGatewayMethodMoviesPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMovies"
        },
        "RestApiId": "jcmn0kq6wj",
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": "i7pzyk",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateMovieLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateMovieLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMoviesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMovies"
        },
        "RestApiId": "jcmn0kq6wj",
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": "i7pzyk",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetMoviesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetMoviesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMoviesIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMoviesIdVar"
        },
        "RestApiId": "jcmn0kq6wj",
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": "i7pzyk",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetMovieLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetMovieLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMoviesIdVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMoviesIdVar"
        },
        "RestApiId": "jcmn0kq6wj",
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": "i7pzyk",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateMovieLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateMovieLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMoviesIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMoviesIdVar"
        },
        "RestApiId": "jcmn0kq6wj",
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": "i7pzyk",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteMovieLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteMovieLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1717185494902": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": "jcmn0kq6wj",
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodMoviesOptions",
        "ApiGatewayMethodMoviesIdVarOptions",
        "ApiGatewayMethodMoviesPost",
        "ApiGatewayMethodMoviesGet",
        "ApiGatewayMethodMoviesIdVarGet",
        "ApiGatewayMethodMoviesIdVarPut",
        "ApiGatewayMethodMoviesIdVarDelete"
      ]
    },
    "CreateMovieLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateMovieLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              "jcmn0kq6wj",
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetMoviesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMoviesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              "jcmn0kq6wj",
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetMovieLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMovieLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              "jcmn0kq6wj",
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateMovieLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateMovieLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              "jcmn0kq6wj",
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteMovieLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteMovieLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              "jcmn0kq6wj",
              "/*/*"
            ]
          ]
        }
      }
    },
    "MoviesTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Movies",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "N"
          },
          {
            "AttributeName": "title",
            "AttributeType": "S"
          },
          {
            "AttributeName": "genres",
            "AttributeType": "S"
          },
          {
            "AttributeName": "actors",
            "AttributeType": "S"
          },
          {
            "AttributeName": "directors",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "TitleIndex",
            "KeySchema": [
              {
                "AttributeName": "title",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          },
          {
            "IndexName": "GenresIndex",
            "KeySchema": [
              {
                "AttributeName": "genres",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          },
          {
            "IndexName": "ActorsIndex",
            "KeySchema": [
              {
                "AttributeName": "actors",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          },
          {
            "IndexName": "DirectorsIndex",
            "KeySchema": [
              {
                "AttributeName": "directors",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-movies-service-dev-ServerlessDeploymentBucketName"
      }
    },
    "CreateMovieLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateMovieLambdaVersionRj8AGJVarjZpFMQqKHNhR3hQInW4QcKD2DjJUI4mRc"
      },
      "Export": {
        "Name": "sls-movies-service-dev-CreateMovieLambdaFunctionQualifiedArn"
      }
    },
    "GetMoviesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMoviesLambdaVersionnAORVOnzOSH3ifBlA29OmDItfxRR7cwmyWO90gUA"
      },
      "Export": {
        "Name": "sls-movies-service-dev-GetMoviesLambdaFunctionQualifiedArn"
      }
    },
    "GetMovieLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMovieLambdaVersionWUNJSJmsNpBZvrxagEKIdlyUm20C3StUMAjnKUswzM"
      },
      "Export": {
        "Name": "sls-movies-service-dev-GetMovieLambdaFunctionQualifiedArn"
      }
    },
    "UpdateMovieLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateMovieLambdaVersionNXK0mrlqHRbRSJddg8FQodl4kG2RutzuiqxgEFmE"
      },
      "Export": {
        "Name": "sls-movies-service-dev-UpdateMovieLambdaFunctionQualifiedArn"
      }
    },
    "DeleteMovieLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteMovieLambdaVersion9meIbPxFbbkB2k7P4H5yZK1qmeTfQkVrTFJoOUQ9g"
      },
      "Export": {
        "Name": "sls-movies-service-dev-DeleteMovieLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            "jcmn0kq6wj",
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-movies-service-dev-ServiceEndpoint"
      }
    }
  }
}